import os, sys, glob, random, numpy
import scipy
import matplotlib.pyplot as plt
from sklearn import svm

y = numpy.zeros(10) #put label_vals in here
stain_type_list =numpy.zeros(10)
count_of_cells = numpy.zeros(10)
count_of_stained = numpy.zeros(10)
line_no = 0

h = 0.02 #set the step size in the mesh
C = 1.0 #regularization parameter

if __name__ == "__main__":
    for infile in glob.glob("data/*.[tT][xX][tT]"):
        y, cell_type, count_of_cells, count_of_stained = numpy.loadtxt(
            infile[0],delimiter=' ', usecols=(1,2,4,5), unpack=True)
        y = y.reshape(y.size, 1)
        count_of_cells = count_of_cells.reshape(count_of_cells.size,1)
        count_of_stained = count_of_stained.reshape(count_of_stained.size,1)
        cell_type = cell_type.reshape(cell_type.size, 1)

        #Combining all the features together
        X = numpy.concatenate((count_of_cells, count_of_stained, cell_type), axis=1)

        #Calling SVMs
        svc = svm.SVC(kernel='linear',C=C).fit(X,y)
        rbf_svc = svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(X,y)
        poly_svc=svm.SVC(kernel='poly', degree=3, C=C).fit(X,y)
        lin_svc= svm.LinearSVC(C=C).fit(X,y)

        #create a mesh to plot in
        x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
        y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
        z_min, z_max = X[:, 2].min() - 1, X[:, 2].max() + 1
        xx, yy, zz = numpy.meshgrid(numpy.arange(x_min, x_max, h),
                                numpy.arange(y_min, y_max, h),
                                numpy.arange(z_min, z_max, h))

        # title for the plots
        titles = ['SVC with linear kernel',
                  'LinearSVC (linear kernel)',
                  'SVC with RBF kernel',
                  'SVC with polynomial (degree 3) kernel']

        for clf in enumerate((svc, lin_svc, rbf_svc, poly_svc)):
            svc_result = svc.predict(y)
            
        '''
        for i, clf in enumerate((svc, lin_svc, rbf_svc, poly_svc)):
            # Plot the decision boundary. For that, we will assign a color to each
            # point in the mesh [x_min, m_max]x[y_min, y_max].
            plt.subplot(2, 2, i + 1)
            plt.subplots_adjust(wspace=0.4, hspace=0.4)

            Z = clf.predict(numpy.c_[xx.ravel(), yy.ravel(), zz.ravel()])

            # Put the result into a color plot
            Z = Z.reshape(xx.shape)
            plt.contourf(xx, yy, Z, cmap=plt.cm.Paired, alpha=0.8)

            # Plot also the training points
            plt.scatter(X[:, 0], X[:, 1], X[:,2], c=y, cmap=plt.cm.Paired)
            #plt.xlabel('Sepal length')
            #plt.ylabel('Sepal width')
            plt.xlim(xx.min(), xx.max())
            plt.ylim(yy.min(), yy.max())
            plt.xticks(())
            plt.yticks(())
            plt.title(titles[i])

        plt.show()
        '''
